<<<<<<< .mine
# --------------
# Title: utilities_site_and_study_vars.R
# --------------
# Author: Cristina DeFilippis (cdefilippis@deloitte.com)
# Date: Oct 31 2016
# --------------
# Description: This is a script to process the raw data from the Oracle database
# to create the modeing data in part in order to run the Pfizer site health 
# algorithms.
# --------------
# Author:
# Date:
# Modification:
# --------------

create_site_and_study_vars <- function(Data) {
  
  ##############################################################################
  ############################### REPORTS DATA #################################
  ##############################################################################
  cat("Creating variables for dates and basic report info\n", file=log_con)
  
  # Create variable: DAYS_SINCE_LAST_REPORT = DATE - PREV_REPORT_START_DATE
  Data$DAYS_SINCE_LAST_REPORT <- (as.integer(Data$DATE) - 
                                    as.integer(Data$PREV_REPORT_START_DATE))
  
  # Create variable: IND_PREV_REPORTS = indicator variable to denote whether this
  # site has had any reports prior to this date, or whether this is the first
  # report for the site (1: has had previous reports, 0: otherwise)
  Data$IND_PREV_REPORTS <- ifelse(!is.na(Data$PREV_REPORT_START_DATE), 1, 0)
  
  # Create variables: DATE_PREV_MON, DATE_PREV_2MON, DATE_PREV_3MON, DATE_PREV_6MON
  # to indicate the 3-month-date and 6-month-date
  # prior to the current date using the seq() function
  
  Data$DATE_PREV_MON <- add_months_vector(Data$DATE, -1)
  Data$DATE_PREV_2MON <- add_months_vector(Data$DATE, -2)
  Data$DATE_PREV_1YR <- add_months_vector(Data$DATE, -12)
  
  
  ##############################################################################
  ############################## SITE/STUDY DATA ###############################
  ##############################################################################
  cat("Creating site and study variables\n", file=log_con)
  
  # Bring in site datasets
  # Keep only selected variables from site dataset
  Data <- merge(Data,
                INPUT$Sites[c("HM_SITE_ID", "HM_STUDY_ID",
                              "SITE_FSFV_DATE_DERIVED", "SITE_LSLV_DATE_DERIVED",
                              "SITE_STATUS", "COUNTRY_NAME")],
                by="HM_SITE_ID")
  
  # Keep only selected variables from study dataset
  Study.vars <- INPUT$Studies[ , c("HM_STUDY_ID", "DEVELOPMENT_PHASE", 
                                   "STUDY_STATUS_CURRENT", 
                                   "STUDY_THERAPEUTIC_AREA", "STUDY_TYPE",
                                   "EARLIEST_FSFV_FROM_SITES", "PFIZER_PROTOCOL_ID")]
  
  # Create grouped therapeutic variable:
  
  # First the important therapeutic variables
  important.TA <- c("METABOLIC DISEASE", "NEUROSCIENCE (NEUROLOGY)", 
                    "NEUROSCIENCE (PSYCHIATRY)", "ONCOLOGY", "PAIN",
                    "CARDIOVASCULAR", "VACCINES", "GASTROINTESTINAL")
  
  # Now substtuting the non-important TA's with 'OTHER' and ensuring it is a factor
  TA.char <- as.character(Study.vars$STUDY_THERAPEUTIC_AREA)
  Study.vars$STUDY_THERAPEUTIC_AREA2 <- ifelse(TA.char %in% important.TA, 
                                               TA.char, "OTHER")
  Study.vars$STUDY_THERAPEUTIC_AREA2 <- factor(Study.vars$STUDY_THERAPEUTIC_AREA2, 
                                               levels=c(important.TA, "OTHER"))
  
  # Merge all vars data set to add study variables
  dat.rows1 <- nrow(Data) # row count pre-merge
  Data <- merge(Data, Study.vars, by="HM_STUDY_ID")
  
  # Create additional date variables
  cat("Creating days since FSFV variables\n", file=log_con)
  
  # Create variable: PERIOD_START_1YR = the latter of the date minus 365 days 
  # (one year) or the site FSFV date
  Data$PERIOD_START_1YR <- pmax(Data$DATE_PREV_1YR, 
                                Data$SITE_FSFV_DATE_DERIVED)
  
  # Create variable: DAYS_SINCE_SITE_FSFV = REPORT START DATE - SITE FSFV DATE
  Data$DAYS_SINCE_SITE_FSFV <- as.numeric(difftime(Data$DATE, 
                                                   Data$SITE_FSFV_DATE_DERIVED, 
                                                   units = "days"))
  # Convert to NA if FSFV is in the future
  Data[!is.na(Data$DAYS_SINCE_SITE_FSFV)
       & Data$DAYS_SINCE_SITE_FSFV <= 0,"DAYS_SINCE_SITE_FSFV"] <- NA
  
  # Create variable: DAYS_SINCE_STUDY_FSFV = REPORT START DATE - EARLIEST FSFV FROM SITES
  Data$DAYS_SINCE_STUDY_FSFV <- as.numeric(difftime(Data$DATE, 
                                                    Data$EARLIEST_FSFV_FROM_SITES, 
                                                    units = "days"))
  # Convert to NA if FSFV is in the future
  Data[!is.na(Data$DAYS_SINCE_STUDY_FSFV)
       & Data$DAYS_SINCE_STUDY_FSFV <= 0,"DAYS_SINCE_STUDY_FSFV"] <- NA
  
  return (Data)
  
}

# Function to create historical turnover dataset/table for spotfire
get_hist_staff_data <- function(Staff.data, to.out){
  # Create historical turnover dataset/table for spotfire
  
  # Start with Staff.turnover.data dataset
  # Keep only roles of "SUB INVESTIGATOR" or "MONITOR"
  dat <- Staff.data[Staff.data$ROLE %in% c("SUB INVESTIGATOR", "MONITOR"), ]
  
  # Merge with the main turnover output dataset (to.out) on HM_SITE_ID
  # Keep only rows that have a match in the main turnover dataset
  dat <- merge(dat, to.out[, c("HM_SITE_ID", "HM_STUDY_ID", 
                                         "PERIOD_START_1YR", "RT_END_DATE")])
  # Filter out those staff who were never active at any point during the period
  # in question
  dat <- dat[with(dat,
             !is.na(FIRST_ACTIVE_DATE)
             & FIRST_ACTIVE_DATE < RT_END_DATE
             & ((!is.na(LAST_ACTIVE_DATE) & LAST_ACTIVE_DATE > PERIOD_START_1YR)
                | CURRENTLY_ACTIVE
                | is.na(LAST_INACTIVE_DATE)
                | LAST_INACTIVE_DATE > PERIOD_START_1YR)),]
  
  # Change variable name from "ROLE" to "CONTACT ROLE"
  dat <- rename(dat, replace = c("ROLE" = "CONTACT_ROLE"))
  
  # Create variable START_DATE: 
  # The later of the corresponding PERIOD_START_1YR from WRK_RT_OUT, or FIRST_ACTIVE_DATE
  dat$START_DATE <- pmax(dat$PERIOD_START_1YR, dat$FIRST_ACTIVE_DATE)
  
  # Create variable TURNOVER_INDICATOR: 
  # 0 means they remained active during the time period; 1 means they quit.
  #
  # 1: If CURRENTLY_ACTIVE = False and LAST_INACTIVE_DATE > START_DATE)
  # 0: Otherwise
  dat$TURNOVER_INDICATOR <- ifelse((!dat$CURRENTLY_ACTIVE) & 
                                     (dat$LAST_INACTIVE_DATE > dat$START_DATE), 1, 0)
  # Create variable END_DATE:
  #
  # If TURNOVER_INDICATOR = 0 (meaning that the employee stayed active during the 
  # period), then this is RT_END_DATE from WRK_RT_OUT. 
  #
  # If TURNOVER_INDICATOR=1 (meaning that they left), then this is the earlier of 
  # the corresponding RT_END_DATE from the WRK_RT_OUT table, or LAST_INACTIVE_DATE.
  dat$END_DATE <- as.Date(ifelse(dat$TURNOVER_INDICATOR==0, 
                                 dat$RT_END_DATE, 
                                 pmin(dat$RT_END_DATE, dat$LAST_INACTIVE_DATE)),
                          origin = R.DATE.ORIGIN)
  
  # Create variable HM_WRK_RT_OUT_HIST_ID: add this, just make all values N/A
  dat$HM_WRK_RT_OUT_HIST_ID <- NA
  
  # Create 2 copies of the dataset 
  dat1 <- dat
  dat2 <- dat
  
  # Create variable TURNOVER_DATE: 
  # In the first dataset, this will be START_DATE 
  # In the second dataset, this will be END_DATE
  dat1 <- rename(dat1, replace = c("START_DATE" = "TURNOVER_DATE"))
  dat2 <- rename(dat2, replace = c("END_DATE" = "TURNOVER_DATE"))
  
  # Create variable TURNOVER_DATE_TYPE: 
  # In the first dataset, this will be "START"
  # In the second dataset, this will be "END"
  dat1$TURNOVER_DATE_TYPE <- "START"
  dat2$TURNOVER_DATE_TYPE <- "END"
  
  # Remove mis-matched columns from the two copies of the dataset
  dat1 <- dat1[, names(dat1) != "END_DATE"]
  dat2 <- dat2[, names(dat2) != "START_DATE"]
  
  # Finally, stack together (row-bind) the two copies of the dataset 
  dat.out <- rbind(dat1, dat2)
  
  # Select columns needed for Spotfire table, in order
  cols.needed <- c("HM_WRK_RT_OUT_HIST_ID", "HM_STUDY_ID", "HM_SITE_ID", 
                   "HM_PERSON_ID", "CONTACT_ROLE", "TURNOVER_DATE", 
                   "TURNOVER_DATE_TYPE", "TURNOVER_INDICATOR")
  
  dat.out <- dat.out[, cols.needed]
  
  return(dat.out)
}
=======
# --------------
# Title: utilities_site_and_study_vars.R
# --------------
# Author: Cristina DeFilippis (cdefilippis@deloitte.com)
# Date: Oct 31 2016
# --------------
# Description: This is a script to process the raw data from the Oracle database
# to create the modeing data in part in order to run the Pfizer site health 
# algorithms.
# --------------
# Author:
# Date:
# Modification:
# --------------

create_site_and_study_vars <- function(Data) {
  
  ##############################################################################
  ############################### REPORTS DATA #################################
  ##############################################################################
  cat("Creating variables for dates and basic report info\n", file=log_con)
  
  # Create variable: DAYS_SINCE_LAST_REPORT = DATE - PREV_REPORT_START_DATE
  Data$DAYS_SINCE_LAST_REPORT <- (as.integer(Data$DATE) - 
                                    as.integer(Data$PREV_REPORT_START_DATE))
  
  # Create variable: IND_PREV_REPORTS = indicator variable to denote whether this
  # site has had any reports prior to this date, or whether this is the first
  # report for the site (1: has had previous reports, 0: otherwise)
  Data$IND_PREV_REPORTS <- ifelse(!is.na(Data$PREV_REPORT_START_DATE), 1, 0)
  
  # Create variables: DATE_PREV_MON, DATE_PREV_2MON, DATE_PREV_3MON, DATE_PREV_6MON
  # to indicate the 3-month-date and 6-month-date
  # prior to the current date using the seq() function
  
  Data$DATE_PREV_MON <- add_months_vector(Data$DATE, -1)
  Data$DATE_PREV_2MON <- add_months_vector(Data$DATE, -2)
  Data$DATE_PREV_1YR <- add_months_vector(Data$DATE, -12)
  
  
  ##############################################################################
  ############################## SITE/STUDY DATA ###############################
  ##############################################################################
  cat("Creating site and study variables\n", file=log_con)
  
  # Bring in site datasets
  # Keep only selected variables from site dataset
  Data <- merge(Data,
                INPUT$Sites[c("HM_SITE_ID", "HM_STUDY_ID",
                              "SITE_FSFV_DATE_DERIVED", "SITE_LSLV_DATE_DERIVED",
                              "SITE_STATUS", "COUNTRY_NAME")],
                by="HM_SITE_ID")
  
  # Keep only selected variables from study dataset
  Study.vars <- INPUT$Studies[ , c("HM_STUDY_ID", "DEVELOPMENT_PHASE", 
                                   "STUDY_STATUS_CURRENT", 
                                   "STUDY_THERAPEUTIC_AREA", "STUDY_TYPE",
                                   "EARLIEST_FSFV_FROM_SITES", "PFIZER_PROTOCOL_ID")]
  
  # Create grouped therapeutic variable:
  
  # First the important therapeutic variables
  important.TA <- c("METABOLIC DISEASE", "NEUROSCIENCE (NEUROLOGY)", 
                    "NEUROSCIENCE (PSYCHIATRY)", "ONCOLOGY", "PAIN",
                    "CARDIOVASCULAR", "VACCINES", "GASTROINTESTINAL")
  
  # Now substtuting the non-important TA's with 'OTHER' and ensuring it is a factor
  TA.char <- as.character(Study.vars$STUDY_THERAPEUTIC_AREA)
  Study.vars$STUDY_THERAPEUTIC_AREA2 <- ifelse(TA.char %in% important.TA, 
                                               TA.char, "OTHER")
  Study.vars$STUDY_THERAPEUTIC_AREA2 <- factor(Study.vars$STUDY_THERAPEUTIC_AREA2, 
                                               levels=c(important.TA, "OTHER"))
  
  # Merge all vars data set to add study variables
  dat.rows1 <- nrow(Data) # row count pre-merge
  Data <- merge(Data, Study.vars, by="HM_STUDY_ID")
  
  # Create additional date variables
  cat("Creating days since FSFV variables\n", file=log_con)
  
  # Create variable: PERIOD_START_1YR = the latter of the date minus 365 days 
  # (one year) or the site FSFV date
  Data$PERIOD_START_1YR <- pmax(Data$DATE_PREV_1YR, 
                                Data$SITE_FSFV_DATE_DERIVED)
  
  # Create variable: DAYS_SINCE_SITE_FSFV = REPORT START DATE - SITE FSFV DATE
  Data$DAYS_SINCE_SITE_FSFV <- as.numeric(difftime(Data$DATE, 
                                                   Data$SITE_FSFV_DATE_DERIVED, 
                                                   units = "days"))
  # Convert to NA if FSFV is in the future
  Data[!is.na(Data$DAYS_SINCE_SITE_FSFV)
       & Data$DAYS_SINCE_SITE_FSFV <= 0,"DAYS_SINCE_SITE_FSFV"] <- NA
  
  # Create variable: DAYS_SINCE_STUDY_FSFV = REPORT START DATE - EARLIEST FSFV FROM SITES
  Data$DAYS_SINCE_STUDY_FSFV <- as.numeric(difftime(Data$DATE, 
                                                    Data$EARLIEST_FSFV_FROM_SITES, 
                                                    units = "days"))
  # Convert to NA if FSFV is in the future
  Data[!is.na(Data$DAYS_SINCE_STUDY_FSFV)
       & Data$DAYS_SINCE_STUDY_FSFV <= 0,"DAYS_SINCE_STUDY_FSFV"] <- NA
  
  return (Data)
  
}

# Function to create historical turnover dataset/table for spotfire
get_hist_staff_data <- function(Staff.data, to.out){
  # Create historical turnover dataset/table for spotfire
  
  # Start with Staff.turnover.data dataset
  # Keep only roles of "SUB INVESTIGATOR" or "MONITOR"
  dat <- Staff.data[Staff.data$ROLE %in% c("SUB INVESTIGATOR", "MONITOR"), ]
  
  # Merge with the main turnover output dataset (to.out) on HM_SITE_ID
  # Keep only rows that have a match in the main turnover dataset
  dat <- merge(dat, to.out[, c("HM_SITE_ID", "HM_STUDY_ID", 
                                         "PERIOD_START_1YR", "RT_END_DATE")])
  # Filter out those staff who were never active at any point during the period
  # in question
  dat <- dat[with(dat,
             !is.na(FIRST_ACTIVE_DATE)
             & FIRST_ACTIVE_DATE < RT_END_DATE
             & ((!is.na(LAST_ACTIVE_DATE) & LAST_ACTIVE_DATE > PERIOD_START_1YR)
                | CURRENTLY_ACTIVE
                | is.na(LAST_INACTIVE_DATE)
                | LAST_INACTIVE_DATE > PERIOD_START_1YR)),]
  
  # Change variable name from "ROLE" to "CONTACT ROLE"
  dat <- rename(dat, replace = c("ROLE" = "CONTACT_ROLE"))
  
  # Create variable START_DATE: 
  # The later of the corresponding PERIOD_START_1YR from WRK_RT_OUT, or FIRST_ACTIVE_DATE
  dat$START_DATE <- pmax(dat$PERIOD_START_1YR, dat$FIRST_ACTIVE_DATE)
  
  # Create variable TURNOVER_INDICATOR: 
  # 0 means they remained active during the time period; 1 means they quit.
  #
  # 1: If CURRENTLY_ACTIVE = False and LAST_INACTIVE_DATE > START_DATE)
  # 0: Otherwise
  dat$TURNOVER_INDICATOR <- ifelse((!dat$CURRENTLY_ACTIVE) & 
                                     (dat$LAST_INACTIVE_DATE > dat$START_DATE), 1, 0)
  # Create variable END_DATE:
  #
  # If TURNOVER_INDICATOR = 0 (meaning that the employee stayed active during the 
  # period), then this is RT_END_DATE from WRK_RT_OUT. 
  #
  # If TURNOVER_INDICATOR=1 (meaning that they left), then this is the earlier of 
  # the corresponding RT_END_DATE from the WRK_RT_OUT table, or LAST_INACTIVE_DATE.
  dat$END_DATE <- as.Date(ifelse(dat$TURNOVER_INDICATOR==0, 
                                 dat$RT_END_DATE, 
                                 pmin(dat$RT_END_DATE, dat$LAST_INACTIVE_DATE)),
                          origin = R.DATE.ORIGIN)
  
  # Create variable HM_WRK_RT_OUT_HIST_ID: add this, just make all values N/A
  dat$HM_WRK_RT_OUT_HIST_ID <- NA
  
  # Create 2 copies of the dataset 
  dat1 <- dat
  dat2 <- dat
  
  # Create variable TURNOVER_DATE: 
  # In the first dataset, this will be START_DATE 
  # In the second dataset, this will be END_DATE
  dat1 <- rename(dat1, replace = c("START_DATE" = "TURNOVER_DATE"))
  dat2 <- rename(dat2, replace = c("END_DATE" = "TURNOVER_DATE"))
  
  # Create variable TURNOVER_DATE_TYPE: 
  # In the first dataset, this will be "START"
  # In the second dataset, this will be "END"
  dat1$TURNOVER_DATE_TYPE <- "START"
  dat2$TURNOVER_DATE_TYPE <- "END"
  
  # Remove mis-matched columns from the two copies of the dataset
  dat1 <- dat1[, names(dat1) != "END_DATE"]
  dat2 <- dat2[, names(dat2) != "START_DATE"]
  
  # Finally, stack together (row-bind) the two copies of the dataset 
  dat.out <- rbind(dat1, dat2)
  
  # Select columns needed for Spotfire table, in order
  cols.needed <- c("HM_WRK_RT_OUT_HIST_ID", "HM_STUDY_ID", "HM_SITE_ID", 
                   "HM_PERSON_ID", "CONTACT_ROLE", "TURNOVER_DATE", 
                   "TURNOVER_DATE_TYPE", "TURNOVER_INDICATOR")
  
  dat.out <- dat.out[, cols.needed]
  
  return(dat.out)
}
>>>>>>> .r554
