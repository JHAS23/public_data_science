<<<<<<< .mine
# --------------
# Title: Output.R
# --------------
# Author: Cristina DeFilippis (cdefilippis@deloitte.com)
# Date: Oct 26 2016
# --------------
# Description: This file contains code used to output modeling datasets used to
# run the site health algorithms as well as the results of the site health
# algorithms to both .csv files and to the database when appropriate. 
# 
# Code will only write to the database if it is a monthly run without the CSV 
# input option specified and ALL five modules pass QC checks and run to 
# completion without errors. If idnividual modules pass QC checks and run to 
# completion, their model outputs will always be saved to .csv files whether or 
# not output is written to the database - .csv files containing outputs are 
# saved to a sub-folder named with the run date/time date in either the 
# "Monthly_runs" or "Ad_hoc" folder within the "Module_output" folder.
# --------------
# Author:
# Date:
# Modification:
# --------------

cat("Running output.R script...\n", file=log_con)

run_output_module <- function(){

  # The timeliness percentile score needs to be flipped (so that low = good
  # and high = bad) before sending to the database.
  # Additionally, the period 1 and 2 data entry timeliness fields need to be
  # multiplied by 100 (so they're displayed as percentages)
  # This is a temporary hotfix implemented in
  # Feb 2017 - in the future, when there is more time for a substantial re-
  # factoring of the code, it would be good to move this fix into the
  # timeliness module R code and ensure consistency in the way percentiles are
  # handled througout the R code and Spotfire application.
  tl.out.tmp <- tl.out
  tl.out.tmp$TIMELINESS_PERCENTILE <- 1. - tl.out.tmp$TIMELINESS_PERCENTILE
  tl.out.tmp$PERIOD_1_DATA_ENTRY_TIMELINESS <- 100*tl.out.tmp$PERIOD_1_DATA_ENTRY_TIMELINESS
  tl.out.tmp$PERIOD_2_DATA_ENTRY_TIMELINESS <- 100*tl.out.tmp$PERIOD_2_DATA_ENTRY_TIMELINESS
  tl.out.tmp$COMPLIANCE_3_MONTHS <- 100*tl.out.tmp$COMPLIANCE_3_MONTHS

  
  #############################################################################
  # For each of the sub-modules and the overall site health module, if they
  # are set to run, and run through modeling successfully, then save both the
  # dataset used for modeling ("Model_Data_XX.csv") as well as the actual
  # model results ("XX_Module_Output.csv") with a timestamp in the file name.
  #
  # Note that the PD and TL modules have one extra table each for outputting to
  # Spotfire (historical data tables PD.out.hist and TO.out.hist).
  #############################################################################
  
  # PROTOCOL DEVIATIONS
  if (RUN.PD.MODULE){ # if modeling dataset created save it as .csv file 
    save_output_to_csv(Model.data.PD, "Model Data", "PD", log_con)
    if (PASS.PD){ # if model run successfully save model output to .csv as well
      save_output_to_csv(pd.out, "Module Output", "PD", log_con)
      if (MONTHLY.RUN){ # save historical dataset if monthly run
        save_output_to_csv(pd.out.hist, "Module Output", "PD.out.hist", log_con) 
      } 
    }
  }
  
  # SAFETY
  if (RUN.SA.MODULE){ # if modeling dataset created save it as .csv file 
    save_output_to_csv(Model.data.SA, "Model Data", "SA", log_con)
    if (PASS.SA){ # if model run successfully save model output as well
      save_output_to_csv(sa.out, "Module Output", "SA", log_con)
    }
  }
  
  # TIMELINESS
  if (RUN.TL.MODULE){  # if modeling dataset created save it as .csv file 
    save_output_to_csv(Model.data.TL, "Model Data", "TL", log_con)
    if (PASS.TL){ # if model run successfully save model output as well
      save_output_to_csv(tl.out.tmp, "Module Output", "TL", log_con)
    }
  }
  
  # TURNOVER
  if (RUN.TO.MODULE){ # if modeling dataset created save it as .csv file 
    save_output_to_csv(Model.data.TO, "Model Data", "TO", log_con)
    if (PASS.TO){ # if model run successfully save model output as well
      save_output_to_csv(to.out, "Module Output", "TO", log_con)
      if (!is.null(to.out.hist)){ # save historical dataset if not null
        save_output_to_csv(to.out.hist, "Module Output", "TO.out.hist", log_con)
      }
      
    }
  }
  
  # OVERALL SITE HEALTH
  if (RUN.SH.MODULE){ # if modeling dataset created save it as .csv file 
    save_output_to_csv(Model.data.SH, "Model Data", "SH", log_con)
    if (PASS.SH){ # if model run successfully save model output as well
      save_output_to_csv(sh.out, "Module Output", "SH", log_con)
    }
  }
  #############################################################################
  
  ###################### SAVE OUTPUT TO THE DATABASE ##########################
  # If monthly run AND data is not input from/output to .csv files AND all 
  # modules passed QC/ran successfully, THEN output to the database
  #############################################################################
  if (MONTHLY.RUN && !CSV.INPUT && 
      PASS.PD && PASS.SA && PASS.TL && PASS.TO && PASS.SH){
    upload_as_db_table(pd.out, 'WRK_PD_OUT', log_con) # PROTOCOL DEVIATIONS
    upload_as_db_table(pd.out.hist, 'WRK_PD_OUT_HIST', log_con) # Extra PD Spotfire table
    upload_as_db_table(sa.out, 'WRK_SAFETY_OUT', log_con) # SAFETY
    upload_as_db_table(tl.out.tmp, 'WRK_TL_OUT', log_con) # TIMELINESS
    upload_as_db_table(to.out, 'WRK_RT_OUT', log_con) # TURNOVER
    upload_as_db_table(to.out.hist, 'WRK_RT_OUT_HIST', log_con) # Extra TO Spotfire table
    # For SH output, drop column "ISSUE_COUNT_EXPECTED" before sending to database
    # (this column is not included in the db table / not shown in Spotfire)
    ind.drop <- which(names(sh.out)=="ISSUE_COUNT_EXPECTED") # get column numeber
    upload_as_db_table(sh.out[,-ind.drop], 'WRK_GL_OUT_OVERVIEW', log_con) # OVERALL SITE HEALTH
  }
  #############################################################################
  
  # Create indicator files ####################################################
  # Output .txt files indicating success vs. errrors for each of the 5 modules
  write_indicator_files()

  
  # Output Benchmarking #######################################################
  # Output benchmarking analysis results, if it was run
  if (RUN.BENCHMARKING){
    save_benchmarking_results(log_con)
  }
}


run_output_module()



=======
# --------------
# Title: Output.R
# --------------
# Author: Cristina DeFilippis (cdefilippis@deloitte.com)
# Date: Oct 26 2016
# --------------
# Description: This file contains code used to output modeling datasets used to
# run the site health algorithms as well as the results of the site health
# algorithms to both .csv files and to the database when appropriate. 
# 
# Code will only write to the database if it is a monthly run without the CSV 
# input option specified and ALL five modules pass QC checks and run to 
# completion without errors. If idnividual modules pass QC checks and run to 
# completion, their model outputs will always be saved to .csv files whether or 
# not output is written to the database - .csv files containing outputs are 
# saved to a sub-folder named with the run date/time date in either the 
# "Monthly_runs" or "Ad_hoc" folder within the "Module_output" folder.
# --------------
# Author:
# Date:
# Modification:
# --------------

cat("Running output.R script...\n", file=log_con)

run_output_module <- function(){

  # The timeliness percentile score needs to be flipped (so that low = good
  # and high = bad) before sending to the database.
  # Additionally, the period 1 and 2 data entry timeliness fields need to be
  # multiplied by 100 (so they're displayed as percentages)
  # This is a temporary hotfix implemented in
  # Feb 2017 - in the future, when there is more time for a substantial re-
  # factoring of the code, it would be good to move this fix into the
  # timeliness module R code and ensure consistency in the way percentiles are
  # handled througout the R code and Spotfire application.
  tl.out.tmp <- tl.out
  tl.out.tmp$TIMELINESS_PERCENTILE <- 1. - tl.out.tmp$TIMELINESS_PERCENTILE
  tl.out.tmp$PERIOD_1_DATA_ENTRY_TIMELINESS <- 100*tl.out.tmp$PERIOD_1_DATA_ENTRY_TIMELINESS
  tl.out.tmp$PERIOD_2_DATA_ENTRY_TIMELINESS <- 100*tl.out.tmp$PERIOD_2_DATA_ENTRY_TIMELINESS
  tl.out.tmp$COMPLIANCE_3_MONTHS <- 100*tl.out.tmp$COMPLIANCE_3_MONTHS

  
  #############################################################################
  # For each of the sub-modules and the overall site health module, if they
  # are set to run, and run through modeling successfully, then save both the
  # dataset used for modeling ("Model_Data_XX.csv") as well as the actual
  # model results ("XX_Module_Output.csv") with a timestamp in the file name.
  #
  # Note that the PD and TL modules have one extra table each for outputting to
  # Spotfire (historical data tables PD.out.hist and TO.out.hist).
  #############################################################################
  
  # PROTOCOL DEVIATIONS
  if (RUN.PD.MODULE){ # if modeling dataset created save it as .csv file 
    save_output_to_csv(Model.data.PD, "Model Data", "PD", log_con)
    if (PASS.PD){ # if model run successfully save model output to .csv as well
      save_output_to_csv(pd.out, "Module Output", "PD", log_con)
      if (MONTHLY.RUN){ # save historical dataset if monthly run
        save_output_to_csv(pd.out.hist, "Module Output", "PD.out.hist", log_con) 
      } 
    }
  }
  
  # SAFETY
  if (RUN.SA.MODULE){ # if modeling dataset created save it as .csv file 
    save_output_to_csv(Model.data.SA, "Model Data", "SA", log_con)
    if (PASS.SA){ # if model run successfully save model output as well
      save_output_to_csv(sa.out, "Module Output", "SA", log_con)
    }
  }
  
  # TIMELINESS
  if (RUN.TL.MODULE){  # if modeling dataset created save it as .csv file 
    save_output_to_csv(Model.data.TL, "Model Data", "TL", log_con)
    if (PASS.TL){ # if model run successfully save model output as well
      save_output_to_csv(tl.out.tmp, "Module Output", "TL", log_con)
    }
  }
  
  # TURNOVER
  if (RUN.TO.MODULE){ # if modeling dataset created save it as .csv file 
    save_output_to_csv(Model.data.TO, "Model Data", "TO", log_con)
    if (PASS.TO){ # if model run successfully save model output as well
      save_output_to_csv(to.out, "Module Output", "TO", log_con)
      if (!is.null(to.out.hist)){ # save historical dataset if not null
        save_output_to_csv(to.out.hist, "Module Output", "TO.out.hist", log_con)
      }
      
    }
  }
  
  # OVERALL SITE HEALTH
  if (RUN.SH.MODULE){ # if modeling dataset created save it as .csv file 
    save_output_to_csv(Model.data.SH, "Model Data", "SH", log_con)
    if (PASS.SH){ # if model run successfully save model output as well
      save_output_to_csv(sh.out, "Module Output", "SH", log_con)
    }
  }
  #############################################################################
  
  ###################### SAVE OUTPUT TO THE DATABASE ##########################
  # If monthly run AND data is not input from/output to .csv files AND all 
  # modules passed QC/ran successfully, THEN output to the database
  #############################################################################
  if (MONTHLY.RUN && !CSV.INPUT && 
      PASS.PD && PASS.SA && PASS.TL && PASS.TO && PASS.SH){
    upload_as_db_table(pd.out, 'WRK_PD_OUT', log_con) # PROTOCOL DEVIATIONS
    upload_as_db_table(pd.out.hist, 'WRK_PD_OUT_HIST', log_con) # Extra PD Spotfire table
    upload_as_db_table(sa.out, 'WRK_SAFETY_OUT', log_con) # SAFETY
    upload_as_db_table(tl.out.tmp, 'WRK_TL_OUT', log_con) # TIMELINESS
    upload_as_db_table(to.out, 'WRK_RT_OUT', log_con) # TURNOVER
    upload_as_db_table(to.out.hist, 'WRK_RT_OUT_HIST', log_con) # Extra TO Spotfire table
    # For SH output, drop column "ISSUE_COUNT_EXPECTED" before sending to database
    # (this column is not included in the db table / not shown in Spotfire)
    ind.drop <- which(names(sh.out)=="ISSUE_COUNT_EXPECTED") # get column numeber
    upload_as_db_table(sh.out[,-ind.drop], 'WRK_GL_OUT_OVERVIEW', log_con) # OVERALL SITE HEALTH
  }
  #############################################################################
  
  # Create indicator files ####################################################
  # Output .txt files indicating success vs. errrors for each of the 5 modules
  write_indicator_files()

  
  # Output Benchmarking #######################################################
  # Output benchmarking analysis results, if it was run
  if (RUN.BENCHMARKING){
    save_benchmarking_results(log_con)
  }
}


run_output_module()



>>>>>>> .r554
